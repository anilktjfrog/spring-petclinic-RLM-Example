
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "JF-CLI: JAVA"
on:
  workflow_dispatch:
  
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
  
env:
  JF_RT_URL: "https://${{vars.JF_NAME}}.jfrog.io"
  BUILD_NAME: "spring-petclinic"
  BUILD_ID: "ga-${{github.run_number}}"
  JOB_SUMMARY: false
  JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
  JAVA_PROVIDER: 'corretto'
  JAVA_VERSION: '17'
  EVIDENCE_SPEC_JSON: 'evd-spec-info.json'  # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-setup
  RBv2_SPEC_JSON: "rbv2-spec-info.json"
  RBV2_SIGNING_KEY: "GPG" # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/create-signing-keys-for-release-bundles-v2
  DEFAULT_WORKSPACE: "${{github.workspace}}"  # /home/runner/work/spring-petclinic/spring-petclinic
jobs:
  dockerPackage:
    name: "Docker"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17]
        include:
          - language: ['java-kotlin']
            build-mode: none 
    env:  
      OIDC_AUDIENCE: 'korber-workshop'
      OIDC_PROVIDER: 'korber-workshop-github-oidc'
      RT_REPO_MVN_VIRTUAL: "korber-workshop-maven-dev"
      RT_REPO_DOCKER_VIRTUAL: "korber-workshop-docker-dev"
      DOCKER_BUILDX_PLATFORMS: 'linux/amd64,linux/arm64'
      DOCKER_METADATA_JSON: 'build-metadata.json'
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"

    runs-on: ${{matrix.os}}
    timeout-minutes: 30   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JFROG_CLI_LOG_LEVEL: ${{env.JFROG_CLI_LOG_LEVEL}}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: "Clone VCS"
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: "Java provider = ${{env.JAVA_PROVIDER}} with ver = ${{env.JAVA_VERSION}}"
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{env.JAVA_PROVIDER}} # corretto
          java-version: ${{env.JAVA_VERSION}}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: "Software version"
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: "Config jf with mvn repos"
        run: |
          jf mvnc --global --repo-resolve-releases ${{env.RT_REPO_MVN_VIRTUAL}} --repo-resolve-snapshots ${{env.RT_REPO_MVN_VIRTUAL}}

      - name: "Create ENV variables"
        run: |
          echo "RT_REPO_DOCKER_URL=${{vars.JF_NAME}}.jfrog.io/${{env.RT_REPO_DOCKER_VIRTUAL}}/${{env.BUILD_NAME}}:${{env.BUILD_ID}}" >> $GITHUB_ENV

      - name: "Docker authentication"  # ref https://github.com/marketplace/actions/docker-login
        id: config-docker
        uses: docker/login-action@v3
        with: 
          registry: ${{env.JF_RT_URL}}
          username: ${{steps.setup-cli.outputs.oidc-user}}
          password: ${{steps.setup-cli.outputs.oidc-token}}

      - name: "Docker buildx instance"
        uses: docker/setup-buildx-action@v3   # ref: https://github.com/marketplace/actions/docker-setup-buildx h
        with:
          use: true
          platforms: ${{env.DOCKER_BUILDX_PLATFORMS}} # linux/amd64,linux/arm64 # ref: https://docs.docker.com/reference/cli/docker/buildx/create/#platform
          install: true

      - name: "list folder"
        run: |
          pwd  
          tree .

      - name: "Docker: Prestep Summary "
        run: |
          echo "# :frog: :ship: Docker: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) and Java [${{env.JAVA_PROVIDER}}](https://github.com/actions/setup-java) v${{env.JAVA_VERSION}} " >> $GITHUB_STEP_SUMMARY
          echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(mvn -v) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(docker -v) " >> $GITHUB_STEP_SUMMARY
          echo " - Docker buildx configured with platforms: [${{env.DOCKER_BUILDX_PLATFORMS}}](https://docs.docker.com/reference/cli/docker/buildx/create/#platform) " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli and Docker login with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Maven Repo URL: ${{env.RT_REPO_MVN_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker Repo URL: ${{env.RT_REPO_DOCKER_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker URL: ${{env.RT_REPO_DOCKER_URL}}" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      - name: "Xray & JAS: Audit"  # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security
        # scan for Xray: Source code dependencies and JAS: Secrets Detection, IaC, Vulnerabilities Contextual Analysis 'SAST'
        timeout-minutes: 15  # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf audit --mvn --sast=true --sca=true --secrets=true --licenses=true --validate-secrets=true --vuln=true --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: Create MVN Build"
          # jf mvn clean install -DskipTests=true -Denforcer.skip=true --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}}
        run: |     # -Djar.finalName=${{env.JAR_FINAL_NAME}} 
          mvn clean install -DskipTests=true -Denforcer.skip=true

      - name: "Package: Xray - mvn Artifact scan"
        timeout-minutes: 15  # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf scan . --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: Docker build and push"
        run: |
          docker image build -f my-files/Dockerfile-cli-mvn -t ${{env.RT_REPO_DOCKER_URL}} --platform "${{env.DOCKER_BUILDX_PLATFORMS}}" --metadata-file "${{env.DOCKER_METADATA_JSON}}" --push .

      - name: "Optional: Docker pull image"
        run: |
          docker pull ${{env.RT_REPO_DOCKER_URL}}

      - name: "Package: Docker image list"
        run: |
          docker image ls

      # Evidence - Package references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      # jf evd create --predicate ./evd-package.json --predicate-type https://jfrog.com/evidence/build-signature/v1 --package-name spring-petclinic --package-version evd.2025-01-31-14-53 --package-repo-name "krishnam-docker-virtual" --key ~/.ssh/jfrog_evd_public.pem --key-alias "KRISHNAM_JFROG_EVD_PUBLICKEY"
      - name: "Evidence: Package"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions","build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd":"Evidence-Package", "package":"${{env.RT_REPO_DOCKER_URL}}" }' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --package-name ${{env.BUILD_NAME}} --package-version ${{env.BUILD_ID}} --package-repo-name ${{env.RT_REPO_DOCKER_VIRTUAL}} --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}"  --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 
          #echo "    - Evidence for PACKAGE attached. Info available SaaS >> tab: Application >> left menu: Artifactory >> Packages >> ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
        

      - name: "Package: Xray - docker Artifact scan"
        timeout-minutes: 15    # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf docker scan ${{env.RT_REPO_DOCKER_URL}} --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}} --format=table --extended-table=true --threads=100 --fail=false  --detailed-summary=true  --vuln=true --licenses=true
      
      - name: "Optional: Set env vars for BuildInfo"   # These properties were captured in Builds >> spring-petclinic >> version >> Environment tab
        run: |
          export job="github-action" org="ps" team="architecture" product="jfrog-saas" 

      - name: "BuildInfo: Collect env"
        run: jf rt bce ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 
 
      - name: "BuildInfo: Add VCS info"
        run: jf rt bag ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 

      - name: "BuildInfo: Docker build create"
        run: |
          imageDigest=$(cat "${{env.DOCKER_METADATA_JSON}}" | jq '.["containerimage.digest"]')
          echo "${imageDigest}"

          echo "${{env.RT_REPO_DOCKER_URL}}@${imageDigest}" > ${{env.DOCKER_METADATA_JSON}}

          jf rt bdc ${{env.RT_REPO_DOCKER_VIRTUAL}} --image-file ${{env.DOCKER_METADATA_JSON}} --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}}

      - name: "BuildInfo: Build Publish"
        run: jf rt bp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --detailed-summary=true

      # Evidence - Build references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      - name: "Evidence: Build Publish"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions","build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-BuildPublish"}' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}
          #echo "    - Evidence for BUILD Publish attached. " >> $GITHUB_STEP_SUMMARY

      - name: "Optional: Add Builds to Indexing Configuration"
        run: |
          jf xr curl "/api/v1/binMgr/builds" -H 'Content-Type: application/json' -d '{"names": ["${{env.BUILD_NAME}}"] }'

      # Set properties      
      - name: "Optional: Set prop for Artifact"  # These properties were captured Artifacts >> repo path 'spring-petclinic.---.jar' >> Properties
        run: |
          ts="cmd.$(date '+%Y-%m-%d-%H-%M')" 
          jf rt sp "job=github-action;env=demo;org=ps;team=arch;pack_cat=webapp;build=maven;product=artifactory;features=package,buildinfo;ts=ts-${BUILD_ID}" --build="${{env.BUILD_NAME}}/${{env.BUILD_ID}}"

      - name: "Optional: Query build info"
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{env.BUILD_NAME}}/${{env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON

      - name: "Sleep for few seconds"
        env: 
          SLEEP_TIME: 30
        run: |
           echo "Sleeping for ${{env.SLEEP_TIME}} seconds..."
           sleep ${{env.SLEEP_TIME}}  # Sleeping for 20 seconds before executing the build publish seems to have resolved the build-scan issue. This delay might be helping with synchronization or resource availability, ensuring a smooth build process.
           echo "Awake now!"

      - name: "Optional: Query - Build Scan status"
        run: |
          jf xr curl "/api/v1/build/status" -H 'Content-Type: application/json' -d '{"name": "${{env.BUILD_NAME}}", "number": "${{env.BUILD_ID}}" }'
 
      - name: "Optional: Xray sbom-enrich" 
        run: |
          jf se "target/classes/META-INF/sbom/application.cdx.json" --threads=100

      - name: "BuildInfo: Xray - Build scan"
        timeout-minutes: 15    # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf bs ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --fail=false --format=table --extended-table=true --rescan=false --vuln=true

      # Release Bundle v2
      - name: "RLM: RBv2 spec - create"
        run: |
          echo "{ \"files\": [ {\"build\": \"${{env.BUILD_NAME}}/${{env.BUILD_ID}}\" } ] }"  > ${{env.RBv2_SPEC_JSON}}
          cat ${{env.RBv2_SPEC_JSON}}

      - name: "RLM: RBv2 Create NEW"
        run: |
          jf rbc ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}} --spec=${{env.RBv2_SPEC_JSON}}

      - name: "Evidence: RBv2 state NEW"
        continue-on-error: true 
        env:          
          NAME_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&bundleToFlash=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=promotion"
          VER_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName='${{env.BUILD_NAME}}'&bundleToFlash='${{env.BUILD_NAME}}'&releaseBundleVersion='${{env.BUILD_ID}}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion"
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "NEW" }' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}
          #echo "    - Evidence for RBv2 attached at [${{env.BUILD_NAME}}](${{env.VER_LINK}}) " >> $GITHUB_STEP_SUMMARY


  rbv2PromoteDev:
    name: "RBv2 Promote DEV"
    needs: dockerPackage
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "DEV"
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JFROG_CLI_LOG_LEVEL: ${{env.JFROG_CLI_LOG_LEVEL}}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      - name: "Evidence: RBv2 state DEV"
        continue-on-error: true
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}" }' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}


  rbv2PromoteQA:
    name: "RBv2 Promote QA"
    needs: rbv2PromoteDev
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "QA"
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JFROG_CLI_LOG_LEVEL: ${{env.JFROG_CLI_LOG_LEVEL}}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      - name: "Evidence: RBv2 state DEV"
        continue-on-error: true
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}" }' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

        
  rbv2PromoteProd:
    name: "RBv2 Promote Prod"
    needs: rbv2PromoteQA
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "PROD"
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JFROG_CLI_LOG_LEVEL: ${{env.JFROG_CLI_LOG_LEVEL}}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      - name: "Evidence: RBv2 state DEV"
        continue-on-error: true
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}" }' > ./${{env.EVIDENCE_SPEC_JSON}}
          cat ./${{env.EVIDENCE_SPEC_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_SPEC_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

      - name: "Optional: rbv2-summary"
        continue-on-error: true 
        env:
          NAME_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&bundleToFlash=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=promotion"
          VER_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName='${{env.BUILD_NAME}}'&bundleToFlash='${{env.BUILD_NAME}}'&releaseBundleVersion='${{env.BUILD_ID}}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion"
          CURL_URL: "${{env.JF_RT_URL}}/lifecycle/api/v2/promotion/records/${{env.BUILD_NAME}}/${{env.BUILD_ID}}?async=false"
        run: |
          echo "#📦 Release Bundle v2 Summary :rocket: " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo "The Build Artifacts has elevated to the subsequent stages" >> $GITHUB_STEP_SUMMARY
          RB2_STATUS_RESP=$(curl -v -G ${{env.CURL_URL}} -H 'Content-Type:  application/json' -H "Authorization: Bearer ${{steps.setup-cli.outputs.oidc-token}}")
          echo $RB2_STATUS_RESP > RBv2_STATUS-${{env.BUILD_ID}}.json
          cat RBv2_STATUS-${{env.BUILD_ID}}.json 
          items=$(echo "$RB2_STATUS_RESP" | jq -c -r '.promotions[]')
          for item in ${items[@]}; do
            envVal=$(echo $item | jq -r '.environment')
            crtVal=$(echo $item | jq -r '.created')
            echo " - ${envVal} on ${crtVal} " >> $GITHUB_STEP_SUMMARY
          done
          echo " " >> $GITHUB_STEP_SUMMARY
          echo "  - Release bundle [${{env.BUILD_NAME}}](${{env.NAME_LINK}}):[${{env.BUILD_ID}}](${{env.VER_LINK}}) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      # Query build 
      - name: "Optional: Query build info"
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{env.BUILD_NAME}}/${{env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON
